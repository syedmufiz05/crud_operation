/*
 * @Author: Sangamesh Hiremath
 * Reference Technical Document: ZXUN USPP V4.15.10_interface
 * Integration Node: ZTE HLR over MML/HB as BOSS node
 */
package com.example.demo.service;

import org.apache.commons.lang3.StringUtils;
import org.json.JSONObject;
import org.springframework.stereotype.Service;

import java.io.*;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;

@Service("hssSocketService")
public class HSSSocketClient implements Serializable {

    Socket socket = null;
    InputStream inputStream = null;
    OutputStream outputStream = null;
    final String host = "10.60.1.148";
    final int port = 9901;
    final int READ_TIME_OUT = 30 * 1000;
    final int RECV_BUFFER = 2 * 1024;
    private String dlgId;
    private String txnId;

    private static HSSSocketClient _instance;


    private HSSSocketClient() {
        connect();

    }

    public static HSSSocketClient getInstance() {
        if (_instance == null) {
            _instance = new HSSSocketClient();
        }
        return _instance;
    }


    //@PostConstruct
    public void connect() {
        try {
            InetAddress address = InetAddress.getByName(host);
            socket = new Socket(address, port);

            inputStream = new BufferedInputStream(socket.getInputStream(), RECV_BUFFER);
            outputStream = new BufferedOutputStream(socket.getOutputStream(), RECV_BUFFER);

            String smpMessage =
                    "`SC`00581.0000001001SRVM    00001001DLGLGN    00001001TXBEG     LOGIN: USER=ussdmml,PSWD=ussdmml9986DEF6";
            String response = send(smpMessage);
            if (response != null && response.indexOf("SUCCESS") != -1) {
                Thread.sleep(5 * 1000);
                dlgId = response.substring(28, 36);
                txnId = response.substring(46, 54);
                System.out.println("TXN ID is " + txnId);
                Thread th = new Thread(new WorkerThread());
                th.start();
            }


        } catch (Exception e) {
            e.printStackTrace();
            System.out.println(e.getLocalizedMessage());
        }
    }


    public String authenticateUser(String msisdn, String pwd) {
        String opInfo = "AUTH PHS MSUB:DN=" + msisdn + ", PWD=" + pwd;
        opInfo = rightPadOpInfo(opInfo);
        StringBuffer message = new StringBuffer();
        int len = 56 + opInfo.length();
        String len_header = Integer.toHexString(len);
        len_header = StringUtils.leftPad(len_header, 4, "0");
        message.append("`SC`");
        message.append(len_header);
        message.append("1.00CCB00000PPSPHS  ");
        message.append(getDlgId());
        message.append("DLGCONFFFF");
        message.append(getTxnId());
        message.append("TXBEG FFFF");
        message.append(opInfo);
        String crc = setStrChkSum(message.toString().substring(8));
        message.append(crc);
        System.out.println(message.toString());

        if (socket == null || !socket.isConnected()) {
            return "Error: HSS Socket Client Service down, please retry later";
        }

        String response = send(message.toString());
        return formatResponseJson(response, msisdn);
    }


    public String changeUserPassword(String msisdn, String old_pwd, String new_pwd) {
        String opInfo = "MOD PHS SIMPWD: DN=" + msisdn + " OLDPWD=" + old_pwd + " PWD=" + new_pwd;
        opInfo = rightPadOpInfo(opInfo);
        StringBuffer message = new StringBuffer();
        int len = 56 + opInfo.length();
        String len_header = Integer.toHexString(len);
        len_header = StringUtils.leftPad(len_header, 4, "0");
        message.append("`SC`");
        message.append(len_header);
        message.append("1.00CCB00000PPSPHS  ");
        message.append(getDlgId());
        message.append("DLGCONFFFF");
        message.append(getTxnId());
        message.append("TXBEG FFFF");
        message.append(opInfo);
        String crc = setStrChkSum(message.toString().substring(8));
        message.append(crc);
        System.out.println(message.toString());

        if (socket == null || !socket.isConnected()) {
            return "Error: HSS Socket Client Service down, please retry later";
        }

        String response = send(message.toString());
        return formatResponseJson(response, msisdn);
    }

    public String balanceTransfer(String from_msisdn, String pwd, String to_msisdn, String amount) {
        /*
         * Transfer ID, obligatory, generated by the data input end. Format: recharge channel+ YYYYMMDDHHMMSS+
         *  the sequence number of 7 digits. Its range is: 0000000~9999999. For example: IVR200304301730550000123.
         */
        String txnId = "97" + getId("YYYYMMDDHHMMSS") + new Random().nextInt(9999999);
        String opInfo = "TRANSF CHRG ACCNT:ID=" + txnId + "SACCNT=" + from_msisdn + "SPWD=" + pwd + "DACCNT=" + to_msisdn + "FEE=" + amount;
        opInfo = rightPadOpInfo(opInfo);
        StringBuffer message = new StringBuffer();
        int len = 56 + opInfo.length();
        String len_header = Integer.toHexString(len);
        len_header = StringUtils.leftPad(len_header, 4, "0");
        message.append("`SC`");
        message.append(len_header);
        message.append("1.00CCB00000PPSPHS  ");
        message.append(getDlgId());
        message.append("DLGCONFFFF");
        message.append(getTxnId());
        message.append("TXBEG FFFF");
        message.append(opInfo);
        String crc = setStrChkSum(message.toString().substring(8));
        message.append(crc);
        System.out.println(message.toString());

        if (socket == null || !socket.isConnected()) {
            return "Error: HSS Socket Client Service down, please retry later";
        }

        String response = send(message.toString());
        return formatResponseJson(response, from_msisdn);
    }

    public String deductBalance(String msisdn, String fee, String reason) {
        String txnId = "97" + getId("YYYYMMDDHHMMSS") + new Random().nextInt(9999999);
        String opInfo = "CUT PPS FEE:MDN=" + msisdn + "CUTFEE=" + fee + "ID=" + txnId + "REASON=" + reason;
        opInfo = rightPadOpInfo(opInfo);
        StringBuffer message = new StringBuffer();
        int len = 56 + opInfo.length();
        String len_header = Integer.toHexString(len);
        len_header = StringUtils.leftPad(len_header, 4, "0");
        message.append("`SC`");
        message.append(len_header);
        message.append("1.00CCB00000PPSPHS  ");
        message.append(getDlgId());
        message.append("DLGCONFFFF");
        message.append(getTxnId());
        message.append("TXBEG FFFF");
        message.append(opInfo);
        String crc = setStrChkSum(message.toString().substring(8));
        message.append(crc);
        System.out.println(message.toString());

        if (socket == null || !socket.isConnected()) {
            return "Error: HSS Socket Client Service down, please retry later";
        }

        String response = send(message.toString());
        return formatResponseJson(response, msisdn);
    }

    public String queryMultiBalance(String msisdn) {
        String opInfo = "LIST PHS MULBAL:DN=" + msisdn + ",BALCODE=A999";
        opInfo = rightPadOpInfo(opInfo);
        StringBuffer message = new StringBuffer();
        int len = 56 + opInfo.length();
        String len_header = Integer.toHexString(len);
        len_header = StringUtils.leftPad(len_header, 4, "0");
        message.append("`SC`");
        message.append(len_header);
        message.append("1.00CCB00000PPSPHS  ");
        message.append(getDlgId());
        message.append("DLGCONFFFF");
        message.append(getTxnId());
        message.append("TXBEG FFFF");
        message.append(opInfo);
        String crc = setStrChkSum(message.toString().substring(8));
        message.append(crc);
        System.out.println(message.toString());

        if (socket == null || !socket.isConnected()) {
            return "Error: HSS Socket Client Service down, please retry later";
        }

        String response = send(message.toString());
        return formatResponseJson(response, msisdn);
    }


    public String debit(String msisdn) {
        String txnId = "97" + getId("YYYYMMDDHHMMSS") + new Random().nextInt(9999999);
        String opInfo = "DEBIT ACNT:ID=" + txnId + "DN=" + msisdn;
        opInfo = rightPadOpInfo(opInfo);
        StringBuffer message = new StringBuffer();
        int len = 56 + opInfo.length();
        String len_header = Integer.toHexString(len);
        len_header = StringUtils.leftPad(len_header, 4, "0");
        message.append("`SC`");
        message.append(len_header);
        message.append("1.00CCB00000PPSPHS  ");
        message.append(getDlgId());
        message.append("DLGCONFFFF");
        message.append(getTxnId());
        message.append("TXBEG FFFF");
        message.append(opInfo);
        String crc = setStrChkSum(message.toString().substring(8));
        message.append(crc);
        System.out.println(message.toString());

        if (socket == null || !socket.isConnected()) {
            return "Error: HSS Socket Client Service down, please retry later";
        }

        String response = send(message.toString());
        return formatResponseJson(response, msisdn);
    }

    public String fellowNumberOperation(String msisdn, String familyNumber, String fellowType, String newFamilyNumber, String opType) {
        String opInfo = "";
        if (opType != null && opType.equals("D")) {
            opInfo = "DEL PHS FAMILY:DN=" + msisdn + "FAMILYNUM=" + familyNumber + "FELLOWTYPE=" + fellowType;
        } else if (opType != null && opType.equals("C")) {
            opInfo = "ADD PHS FAMILY:DN=" + msisdn + "FAMILYNUM=" + familyNumber + "FELLOWTYPE=" + fellowType;
        } else if (opType != null && opType.equals("Q")) {
            opInfo = "LIST PHS FAMILY:DN=" + msisdn;
        } else {
            opInfo = "MOD PHS FAMILY:DN=" + msisdn + "FAMILYNUM=" + familyNumber + "FELLOWTYPE=" + fellowType + "NFAMILYNUM=" + newFamilyNumber;
        }
        opInfo = rightPadOpInfo(opInfo);
        StringBuffer message = new StringBuffer();
        int len = 56 + opInfo.length();
        String len_header = Integer.toHexString(len);
        len_header = StringUtils.leftPad(len_header, 4, "0");
        message.append("`SC`");
        message.append(len_header);
        message.append("1.00CCB00000PPSPHS  ");
        message.append(getDlgId());
        message.append("DLGCONFFFF");
        message.append(getTxnId());
        message.append("TXBEG FFFF");
        message.append(opInfo);
        String crc = setStrChkSum(message.toString().substring(8));
        message.append(crc);
        System.out.println(message.toString());

        if (socket == null || !socket.isConnected()) {
            return "Error: HSS Socket Client Service down, please retry later";
        }

        String response = send(message.toString());
        return formatResponseJson(response, msisdn);
    }

    public String subscribeUser(String msisdn, int subscribe) {
        String opInfo = "Mod SS:MSISDN=" + msisdn + ",PLSS_E=" + subscribe + " ";
        StringBuffer message = new StringBuffer();
        message.append("`SC`005C1.00SRVM1000HLRAGENT");
        message.append(getDlgId());
        message.append("DLGCONFFFF");
        message.append(getTxnId());
        message.append("TXBEG FFFF");
        message.append(opInfo);
        String crc = setStrChkSum(message.toString().substring(8));
        message.append(crc);
        System.out.println(message.toString());

        if (socket == null || !socket.isConnected()) {
            return "Error: HSS Socket Client Service down, please retry later";
        }

        String response = send(message.toString());
        return formatResponseJson(response, msisdn);
    }

    private String formatResponseJson(String response, String msisdn) {
        //`SC`005C1.00ZXWN1001HLRAGENT00000870DLGCONFFFF00000001TXEND FFFFACK:MOD SS:RETN=000000, DESC=successE4ADD6A8
        JSONObject json = new JSONObject();
        String dlgId = null;
        String txnId = null;

        if (response != null) {
            dlgId = response.substring(28, 36);
            txnId = response.substring(46, 54);
            json.put("dlgId", dlgId);
            json.put("txnId", txnId);
            json.put("msisdn", msisdn);
            if (response.contains("SUCCESS")) {
                json.put("status", "success");
                if (response.contains("DESC")) {
                    json.put("description", response.substring(response.indexOf("DESC="), response.length()));
                }
            } else {
                json.put("status", "error");
                //`SC`006C1.00ZXWN1000HLRAGENT0000087ADLGCONFFFF00000001TXEND FFFFACK:MOD SS : RETN=101040, DESC=ISDN is unavailable  CAC9ABE0
                if (response.contains("DESC")) {
                    json.put("description", response.substring(response.indexOf("DESC="), response.length()));
                }

            }
        }
        return json.toString();
    }

    private synchronized String send(String message) {
        String response = "";
        try {
            if (outputStream != null) {
                outputStream.write(message.getBytes(), 0, message.length());
                outputStream.flush();
                response = read();
            }
        } catch (IOException e) {
            response = e.getLocalizedMessage();
            e.printStackTrace();
            if (socket != null) {
                try {
                    outputStream.close();
                    inputStream.close();
                    socket.close();
                    Thread.sleep(5000);
                    connect();
                } catch (IOException | InterruptedException e1) {
                    System.err.println("Error " + e1.getLocalizedMessage());
                }

            }
        }
        return response;
    }

    private synchronized String read() {
        String message = null;
        try {
            socket.setSoTimeout(READ_TIME_OUT);
            byte[] b = new byte[RECV_BUFFER];
            inputStream.read(b, 0, RECV_BUFFER);
            message = new String(b).trim();
            System.out.println(new String(b).trim());
        } catch (SocketException e) {
            System.err.println(e.getLocalizedMessage());
            if (socket != null) {
                try {
                    outputStream.close();
                    inputStream.close();
                    socket.close();
                    Thread.sleep(5000);
                    connect();
                } catch (IOException | InterruptedException e1) {
                    System.err.println("Error " + e1.getLocalizedMessage());
                }

            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return message;
    }

    public static void main(String a[]) {
        //System.out.println(new HSSSocketClient().setStrChkSum("1.00CCB00000PPSPHS  00000001DLGCON    00001003TXBEG     DISP PHS ACNTINFO:DN=23059610020"));
        System.out.println("97 " + new HSSSocketClient().getId("YYYYMMDDHHMMSS") + " " + new Random().nextInt(9999999));
    }

    public String rightPadOpInfo(String opInfo) {
        int padding = opInfo.length() % 4;
        opInfo = StringUtils.rightPad(opInfo, opInfo.length() + padding, " ");
        System.out.println("Right Padded UserInfo : " + opInfo + " " + opInfo.length());
        return opInfo;
    }

    public String setStrChkSum(String message) {

        StringBuffer chkSumSb = new StringBuffer(message);

        char[] res = new char[4];

        for (int j = 0; j < res.length; j++) {
            for (int i = j; i < chkSumSb.length(); i = i + 4) {
                res[j] = (char) (res[j] ^ chkSumSb.charAt(i));
            }
            res[j] = (char) ((~res[j]) & 0x00ff);
        }

        String strChkSum = "";

        for (int i = 0; i < 4; i++) {
            strChkSum = strChkSum + Integer.toHexString((int) res[i]);
        }
        return strChkSum.toUpperCase();
    }

    public String getDlgId() {
        return dlgId;
    }

    public void setDlgId(String dlgId) {
        this.dlgId = dlgId;
    }

    public String getTxnId() {

        int value = Integer.parseInt(txnId, 16);
        value++;
        txnId = Integer.toHexString(value);
        String zeros = "0";
        while (txnId.length() < 8) {
            txnId = zeros + txnId;
        }
        return txnId;
    }

    public void setTxnId(String txnId) {
        this.txnId = txnId;
    }

    public String getId(String format) {
        SimpleDateFormat sdf = new SimpleDateFormat(format);
        return sdf.format(new Date());
    }

    private class WorkerThread implements Runnable {


        public void run() {
            try {
                System.out.println("Heartbeat thread started for 12000ms");
                while (true) {
                    Thread.sleep(4 * 30000L);
                    String mmlHeartBeat = "`SC`0004HBHBB7BDB7BD";
                    System.out.println("Heartbeat Request " + mmlHeartBeat);
                    send(mmlHeartBeat);
                }
            } catch (Exception e) {
                System.err.println("Heartbeat Thread " + e.getLocalizedMessage());
                if (socket != null) {
                    try {
                        outputStream.close();
                        inputStream.close();
                        socket.close();
                        Thread.sleep(5000);
                        connect();
                    } catch (IOException | InterruptedException e1) {
                        System.err.println("Error " + e1.getLocalizedMessage());
                    }

                }
            }
        }
    }

    public String ussdDebit(String rechargeChannel, Integer dn) {
        // TODO Auto-generated method stub
        return null;
    }

    public void sendMessage(String msg) {
        send(msg);
    }

}


